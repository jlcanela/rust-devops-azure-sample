name: Release - create draft release
on:
  workflow_dispatch:
    inputs:
      tagName:
        description: 'Name of git tag to be created, and then draft release created. Syntax: "v[0-9]+.[0-9]+.[0-9]+".'
        required: true

permissions:
  contents: write
  packages: write

jobs:
  tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate format of received tag
        uses: actions/github-script@v7
        with:
          script: |
            const newTag = core.getInput('tag-name');
            const regex = /^v[0-9]+\.[0-9]+\.[0-9]+$/;
            
            if (!regex.test(newTag)) {
              core.setFailed('Tag does not match the required format "v[0-9]+.[0-9]+.[0-9]+"');
              return;
            }
          tag-name: ${{ github.event.inputs.tagName }}

      - name: Check tag's correct version increment
        uses: actions/github-script@v7
        with:
          script: |
            const newTag = core.getInput('tag-name');

            // get latest tag
            const { data: refs } = await github.rest.git.listMatchingRefs({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags/'
            });
            console.log('refs:', refs);
            console.log(`Existing tags: ${refs.map(ref => ref.ref.replace('refs/tags/', '')).join(', ')}`);

            const latestTag = refs.length == 0 ? '0.0.0' : refs.sort((a, b) => new Date(b.object.date) - new Date(a.object.date))[0].ref.replace('refs/tags/', '');
            console.log(`Latest tag: ${latestTag}`);

            const latestVersion = latestTag.replace('v', '').split('.').map(Number);
            const newVersion = newTag.replace('v', '').split('.').map(Number);

            // check tag's correct version increase
            const isValid = (latestVersion[0] === newVersion[0] && latestVersion[1] === newVersion[1] && newVersion[2] === latestVersion[2] + 1) ||
              (latestVersion[0] === newVersion[0] && newVersion[1] === latestVersion[1] + 1 && newVersion[2] === 0) ||
              (newVersion[0] === latestVersion[0] + 1 && newVersion[1] === 0 && newVersion[2] === 0);

            if (!isValid) {
              core.setFailed('New tag is not one version higher than the latest tag');
              return;
            }

          tag-name: ${{ github.event.inputs.tagName }}

      - name: Create and push tag
        uses: actions/github-script@v7
        with:
          script: |
            const tag = core.getInput('tag-name')
            const ref = `refs/tags/${tag}`;
            const sha = context.sha; // The SHA of the commit to tag
        
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: ref,
              sha: sha
            });
        
            console.log(`Tag created: ${tag}`);
          github-token: ${{ secrets.GITHUB_TOKEN }}
          tag-name: ${{ github.event.inputs.tagName }}
   
  release:
    needs: tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: refs/tags/${{ github.event.inputs.tagName }}

      - name: Generate release notes
        id: generate_release_notes
        uses: AbsaOSS/generate-release-notes@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag-name: ${{ github.event.inputs.tagName }}
          chapters: |
            [
              {"title": "Breaking Changes ðŸ’¥", "label": "breaking-change"},
              {"title": "New Features ðŸŽ‰", "label": "feature"},
              {"title": "New Features ðŸŽ‰", "label": "enhancement"},
              {"title": "Bugfixes ðŸ› ", "label": "bug"}
            ]
          warnings: true

      - name: Create draft release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ github.event.inputs.tagName }}
          body: ${{ steps.generate_release_notes.outputs.releaseNotes }}
          tag_name: ${{ github.event.inputs.tagName }}
          draft: true
          prerelease: false

  docker_push: 
    needs: release
    runs-on: ubuntu-latest
    steps:
      # Caches and restores the bazelisk download directory.
      # usual cache key have branch name, but we don't need it.
      # $ { { runner.os }}-$ { { env.cache-name } } -development
      - name: Setup bazelisk
        uses: bazel-contrib/setup-bazel@0.8.1
        with:
          # Avoid downloading Bazel every time.
          bazelisk-cache: true
          # Store build cache per workflow.
          disk-cache: "bazel-cache"
          # Share repository cache between workflows.
          repository-cache: true
      # # Workaround: https://github.com/docker/build-push-action/issues/461
      # - name: Setup Docker buildx
      #   uses: docker/setup-buildx-action@v2
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: refs/tags/${{ github.event.inputs.tagName }}

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ghcr.io
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
  
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          #images: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          images: ghcr.io/jlcanela/rust-azure-webapp-sample
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Push docker image to ghcr.io
        run: bazel run //oci:push_rust_app_server_image
